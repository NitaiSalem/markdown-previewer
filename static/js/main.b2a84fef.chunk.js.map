{"version":3,"sources":["components/Editor.js","components/Previewer.js","components/MarkdownPreviewer.js","utils.js","App.js","reportWebVitals.js","index.js"],"names":["Editor","style","text","toggleEditor","editorFullscreen","onChange","id","className","onClick","icon","faCompress","faExpandArrowsAlt","value","Previewer","togglePreviewer","previewerFullscreen","markdown","marked","sanitize","setOptions","breaks","dangerouslySetInnerHTML","__html","MarkdownPreviewer","useState","input","setInput","setEditorFullscreen","setPreviewerFullscreen","target","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAGaA,EAAS,SAAC,GAA+D,IAA7DC,EAA4D,EAA5DA,MAAOC,EAAqD,EAArDA,KAAMC,EAA+C,EAA/CA,aAAcC,EAAiC,EAAjCA,iBAAkBC,EAAe,EAAfA,SACrE,OACC,sBAAKC,GAAIL,EAAT,UACC,sBAAKM,UAAU,kBAAf,UACC,oBAAIA,UAAU,kBAAd,oBACA,wBAAQC,QAASL,EAAjB,SACaC,EACX,cAAC,IAAD,CAAiBK,KAAMC,MAEvB,cAAC,IAAD,CAAiBD,KAAME,WAI1B,0BAAUL,GAAG,SAASM,MAAOV,EAAMG,SAAUA,Q,gBCXnCQ,EAAY,SAAC,GAA2D,IAAzDC,EAAwD,EAAxDA,gBAAiBC,EAAuC,EAAvCA,oBAAqBd,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KAClEc,EAAWC,IAAOf,EAAM,CAAEgB,UAAU,IAI1C,OAHAD,IAAOE,WAAW,CACjBC,QAAQ,IAGR,sBAAKd,GAAIL,EAAT,UACC,sBAAKM,UAAU,kBAAf,UACC,oBAAIA,UAAU,kBAAd,uBACA,wBAAQC,QAASM,EAAjB,SACEC,EACA,cAAC,IAAD,CAAiBN,KAAMC,MAEvB,cAAC,IAAD,CAAiBD,KAAME,WAI1B,qBAAKL,GAAG,UAAUe,wBAAyB,CAAEC,OAAQL,IAAOD,UCiBhDO,EAlCW,WAAO,IAAD,EACLC,mBCNC,+bDKI,mBACxBC,EADwB,KACjBC,EADiB,OAEiBF,oBAAS,GAF1B,mBAExBpB,EAFwB,KAENuB,EAFM,OAGuBH,oBAAS,GAHhC,mBAGxBT,EAHwB,KAGHa,EAHG,KAW/B,OACC,sBAAKtB,GAAG,YAAR,WACGS,GACD,cAAC,EAAD,CACCd,MAAOG,EAAmB,YAAc,mBACxCF,KAAMuB,EACNpB,SAZiB,SAAC,GAAD,IAAGwB,EAAH,EAAGA,OAAH,OAAgBH,EAASG,EAAOjB,QAajDT,aAXiB,kBAAMwB,GAAqBvB,IAY5CA,iBAAkBA,KAGlBA,GACD,cAAC,EAAD,CACCW,oBAAqBA,EACrBd,MAAOc,EAAsB,YAAc,oBAC3Cb,KAAMuB,EACNX,gBAlBoB,kBAAMc,GAAwBb,UEJxCe,MANf,WACE,OACE,cAAC,EAAD,KCMWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b2a84fef.chunk.js","sourcesContent":["import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCompress, faExpandArrowsAlt } from '@fortawesome/fontawesome-free-solid';\r\n\r\nexport const Editor = ({ style, text, toggleEditor, editorFullscreen, onChange }) => {\r\n\treturn (\r\n\t\t<div id={style}>\r\n\t\t\t<div className=\"title-container\">\r\n\t\t\t\t<h3 className=\"component-title\">Editor</h3>\r\n\t\t\t\t<button onClick={toggleEditor}>\r\n                {editorFullscreen ? (\r\n\t\t\t\t\t\t<FontAwesomeIcon icon={faCompress} />\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<FontAwesomeIcon icon={faExpandArrowsAlt} />\r\n\t\t\t\t\t)}\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t\t<textarea id=\"editor\" value={text} onChange={onChange} />\r\n\t\t</div>\r\n\t);\r\n};\r\n","import marked from 'marked';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCompress, faExpandArrowsAlt } from '@fortawesome/fontawesome-free-solid';\r\n\r\nexport const Previewer = ({ togglePreviewer, previewerFullscreen, style, text }) => {\r\n\tconst markdown = marked(text, { sanitize: true });\r\n\tmarked.setOptions({\r\n\t\tbreaks: true\r\n\t});\r\n\treturn (\r\n\t\t<div id={style}>\r\n\t\t\t<div className=\"title-container\">\r\n\t\t\t\t<h3 className=\"component-title\">Previewer</h3>\r\n\t\t\t\t<button onClick={togglePreviewer}>\r\n\t\t\t\t\t{previewerFullscreen ? (\r\n\t\t\t\t\t\t<FontAwesomeIcon icon={faCompress} />\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<FontAwesomeIcon icon={faExpandArrowsAlt} />\r\n\t\t\t\t\t)}\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t\t<div id=\"preview\" dangerouslySetInnerHTML={{ __html: marked(markdown) }} />\r\n\t\t</div>\r\n\t);\r\n};\r\n","import React, { useState } from 'react';\r\nimport { DEFAULTMARKDOWN } from '../utils';\r\nimport { Editor } from './Editor';\r\nimport { Previewer } from './Previewer';\r\n\r\nconst MarkdownPreviewer = () => {\r\n\tconst [input, setInput] = useState(DEFAULTMARKDOWN);\r\n\tconst [editorFullscreen, setEditorFullscreen] = useState(false);\r\n\tconst [previewerFullscreen, setPreviewerFullscreen] = useState(false);\r\n\r\n\tconst handleChange = ({ target }) => setInput(target.value);\r\n\r\n\tconst toggleEditor = () => setEditorFullscreen(!editorFullscreen);\r\n\r\n\tconst togglePreviewer = () => setPreviewerFullscreen(!previewerFullscreen);\r\n\r\n\treturn (\r\n\t\t<div id=\"container\">\r\n\t\t\t{!previewerFullscreen && (\r\n\t\t\t\t<Editor\r\n\t\t\t\t\tstyle={editorFullscreen ? 'fullwidth' : 'editor-container'}\r\n\t\t\t\t\ttext={input}\r\n\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\ttoggleEditor={toggleEditor}\r\n\t\t\t\t\teditorFullscreen={editorFullscreen}\r\n\t\t\t\t/>\r\n\t\t\t)}\r\n\t\t\t{!editorFullscreen && (\r\n\t\t\t\t<Previewer\r\n\t\t\t\t\tpreviewerFullscreen={previewerFullscreen}\r\n\t\t\t\t\tstyle={previewerFullscreen ? 'fullwidth' : 'preview-container'}\r\n\t\t\t\t\ttext={input}\r\n\t\t\t\t\ttogglePreviewer={togglePreviewer}\r\n\t\t\t\t/>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default MarkdownPreviewer;\r\n","export const DEFAULTMARKDOWN = `# H1:Welcome to my React Markdown Previewer!\r\n\r\n## H2:This is a sub-heading...\r\n\r\nThere's also [links](https://www.freecodecamp.com)\r\n\r\ninline:I think you should use an \\`<addr>\\` element here instead.\r\n\r\n~~~ \r\nconst jihr = \"Jihri\"\r\n\r\n~~~\r\n\r\n\r\n1. List item 1 \r\n1.List item 2\r\n\r\n> Block Quotes!\r\n\r\n![Philadelphia was so cool!](https://css-tricks.com/wp-content/uploads/2016/01/choose-markdown.jpg)\r\n\r\nYou can also make text **bold**... whoa!\r\n\r\n`; ","\nimport './App.css';\nimport MarkdownPreviewer from './components/MarkdownPreviewer'\n\nfunction App() {\n  return (\n    <MarkdownPreviewer/>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}